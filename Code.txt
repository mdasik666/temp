from bs4 import BeautifulSoup
import json

def parse_html(html_content):
    return BeautifulSoup(html_content, 'html.parser')

def element_to_string(element):
    """Convert a BeautifulSoup element to a string representation."""
    return str(element)

def compare_elements(element1, element2, path=""):
    differences = []

    # Compare tag names
    if element1.name != element2.name:
        differences.append({
            "type": "tag",
            "path": path,
            "left_element": element_to_string(element1),
            "right_element": element_to_string(element2),
            "message": f"Tag mismatch: '{element1.name}' vs '{element2.name}'"
        })
        return differences

    # Compare attributes
    if element1.attrs != element2.attrs:
        differences.append({
            "type": "attributes",
            "path": path,
            "left_element": element_to_string(element1),
            "right_element": element_to_string(element2),
            "message": f"Attribute mismatch: {element1.attrs} vs {element2.attrs}"
        })

    # Compare text
    if element1.string != element2.string:
        differences.append({
            "type": "text",
            "path": path,
            "left_element": element_to_string(element1),
            "right_element": element_to_string(element2),
            "message": f"Text mismatch: '{element1.string}' vs '{element2.string}'"
        })

    # Recursively compare child elements
    children1 = [child for child in element1.children if child.name]
    children2 = [child for child in element2.children if child.name]

    max_len = max(len(children1), len(children2))
    for i in range(max_len):
        new_path = f"{path}/{element1.name}[{i}]"
        if i < len(children1) and i < len(children2):
            differences.extend(compare_elements(children1[i], children2[i], new_path))
        elif i < len(children1):
            differences.append({
                "type": "missing_in_right",
                "path": new_path,
                "left_element": element_to_string(children1[i]),
                "right_element": None,
                "message": f"Element '{children1[i].name}' is present in the first HTML but missing in the second."
            })
        else:
            differences.append({
                "type": "missing_in_left",
                "path": new_path,
                "left_element": None,
                "right_element": element_to_string(children2[i]),
                "message": f"Element '{children2[i].name}' is present in the second HTML but missing in the first."
            })

    return differences

# Example usage
html1 = '<div><p class="text">Hello</p></div>'
html2 = '<div><p class="text">World</p><span>Extra</span></div>'

soup1 = parse_html(html1)
soup2 = parse_html(html2)

differences = compare_elements(soup1, soup2)

# Output differences as JSON
json_report = json.dumps(differences, indent=4)
print(json_report)
