from docx import Document
from docx.shared import RGBColor
import re

def highlight_exact_words(doc_path, target_words, output_path):
    doc = Document(doc_path)
    word_pattern = r'\b(' + '|'.join(map(re.escape, target_words)) + r')\b'  # Regex to match whole words

    def process_text_runs(runs):
        """ Process each run in a paragraph to highlight exact words while keeping formatting """
        for i in range(len(runs)):
            run = runs[i]
            original_text = run.text
            new_runs = []
            last_index = 0

            for match in re.finditer(word_pattern, original_text):
                start, end = match.span()

                # Add the text before the match (unchanged formatting)
                if start > last_index:
                    new_run = run._element.addnext(run._element)  # Duplicate the run
                    new_run = run._parent.add_run(original_text[last_index:start])
                    new_run.font.bold = run.font.bold
                    new_run.font.italic = run.font.italic
                    new_run.font.underline = run.font.underline
                    new_run.font.size = run.font.size
                    new_run.font.name = run.font.name  # Keep same font
                    new_runs.append(new_run)

                # Add the matched word with red color
                red_run = run._parent.add_run(original_text[start:end])
                red_run.font.bold = run.font.bold
                red_run.font.italic = run.font.italic
                red_run.font.underline = run.font.underline
                red_run.font.size = run.font.size
                red_run.font.name = run.font.name
                red_run.font.color.rgb = RGBColor(255, 0, 0)  # Set red color
                new_runs.append(red_run)

                last_index = end

            # Add remaining text after last match
            if last_index < len(original_text):
                new_run = run._parent.add_run(original_text[last_index:])
                new_run.font.bold = run.font.bold
                new_run.font.italic = run.font.italic
                new_run.font.underline = run.font.underline
                new_run.font.size = run.font.size
                new_run.font.name = run.font.name
                new_runs.append(new_run)

            # Remove the original run after creating new ones
            run.clear()
            run.text = ""  # Clear existing text

    # Process paragraphs in the main document
    for para in doc.paragraphs:
        process_text_runs(para.runs)

    # Process tables in the document
    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                for para in cell.paragraphs:
                    process_text_runs(para.runs)

    # Process headers and footers
    for section in doc.sections:
        for para in section.header.paragraphs:
            process_text_runs(para.runs)
        for para in section.footer.paragraphs:
            process_text_runs(para.runs)

    # Save the modified document
    doc.save(output_path)

# Usage
doc_path = "input.docx"  # Path to input document
target_words = ["example", "document", "highlight"]  # Words to highlight
output_path = "output.docx"  # Path to save output document

highlight_exact_words(doc_path, target_words, output_path)
